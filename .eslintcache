[{"D:\\My project\\my_trello\\src\\reportWebVitals.ts":"1","D:\\My project\\my_trello\\src\\app\\app-reducer.ts":"2","D:\\My project\\my_trello\\src\\features\\TodolistsList\\todolists-reducer.ts":"3","D:\\My project\\my_trello\\src\\components\\ErrorSnackbar\\ErrorSnackbar.tsx":"4","D:\\My project\\my_trello\\src\\api\\todolists-api.ts":"5","D:\\My project\\my_trello\\src\\features\\TodolistsList\\Todolist\\Task\\Task.tsx":"6","D:\\My project\\my_trello\\src\\app\\App.tsx":"7","D:\\My project\\my_trello\\src\\features\\TodolistsList\\Todolist\\Todolist.tsx":"8","D:\\My project\\my_trello\\src\\features\\Login\\Login.tsx":"9","D:\\My project\\my_trello\\src\\app\\store.ts":"10","D:\\My project\\my_trello\\src\\features\\Login\\auth-reducer.ts":"11","D:\\My project\\my_trello\\src\\components\\EditableSpan\\EditableSpan.tsx":"12","D:\\My project\\my_trello\\src\\features\\TodolistsList\\TodolistsList.tsx":"13","D:\\My project\\my_trello\\src\\components\\AddItemForm\\AddItemForm.tsx":"14"},{"size":425,"mtime":1607869388000,"results":"15","hashOfConfig":"16"},{"size":2109,"mtime":1623692145650,"results":"17","hashOfConfig":"16"},{"size":4883,"mtime":1623526413608,"results":"18","hashOfConfig":"16"},{"size":1092,"mtime":1596716576000,"results":"19","hashOfConfig":"16"},{"size":3165,"mtime":1623693173485,"results":"20","hashOfConfig":"16"},{"size":1773,"mtime":1596295538000,"results":"21","hashOfConfig":"16"},{"size":2568,"mtime":1623693426008,"results":"22","hashOfConfig":"16"},{"size":4193,"mtime":1596715250000,"results":"23","hashOfConfig":"16"},{"size":3267,"mtime":1623526682682,"results":"24","hashOfConfig":"16"},{"size":1182,"mtime":1623525861509,"results":"25","hashOfConfig":"16"},{"size":2210,"mtime":1623693351165,"results":"26","hashOfConfig":"16"},{"size":952,"mtime":1594154724000,"results":"27","hashOfConfig":"16"},{"size":4030,"mtime":1623692575414,"results":"28","hashOfConfig":"16"},{"size":1595,"mtime":1596715562000,"results":"29","hashOfConfig":"16"},{"filePath":"30","messages":"31","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},"10jr82a",{"filePath":"32","messages":"33","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"34","messages":"35","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"36","messages":"37","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"38"},{"filePath":"39","messages":"40","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"41","messages":"42","errorCount":0,"warningCount":3,"fixableErrorCount":0,"fixableWarningCount":0,"source":"43","usedDeprecatedRules":"44"},{"filePath":"45","messages":"46","errorCount":0,"warningCount":3,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"47","messages":"48","errorCount":0,"warningCount":6,"fixableErrorCount":0,"fixableWarningCount":0,"source":"49","usedDeprecatedRules":"38"},{"filePath":"50","messages":"51","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"52","messages":"53","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"54","messages":"55","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"56","messages":"57","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"58","messages":"59","errorCount":0,"warningCount":8,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"60","messages":"61","errorCount":0,"warningCount":3,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},"D:\\My project\\my_trello\\src\\reportWebVitals.ts",[],"D:\\My project\\my_trello\\src\\app\\app-reducer.ts",[],"D:\\My project\\my_trello\\src\\features\\TodolistsList\\todolists-reducer.ts",["62"],"D:\\My project\\my_trello\\src\\components\\ErrorSnackbar\\ErrorSnackbar.tsx",[],["63","64"],"D:\\My project\\my_trello\\src\\api\\todolists-api.ts",[],"D:\\My project\\my_trello\\src\\features\\TodolistsList\\Todolist\\Task\\Task.tsx",["65","66","67"],"import React, {ChangeEvent, useCallback} from 'react'\r\nimport {Checkbox, IconButton} from '@material-ui/core'\r\nimport {EditableSpan} from '../../../../components/EditableSpan/EditableSpan'\r\nimport {Delete} from '@material-ui/icons'\r\nimport {TaskStatuses, TaskType} from '../../../../api/todolists-api'\r\n\r\ntype TaskPropsType = {\r\n    task: TaskType\r\n    todolistId: string\r\n    changeTaskStatus: (id: string, status: TaskStatuses, todolistId: string) => void\r\n    changeTaskTitle: (taskId: string, newTitle: string, todolistId: string) => void\r\n    removeTask: (taskId: string, todolistId: string) => void\r\n}\r\nexport const Task = React.memo((props: TaskPropsType) => {\r\n    const onClickHandler = useCallback(() => props.removeTask(props.task.id, props.todolistId), [props.task.id, props.todolistId]);\r\n\r\n    const onChangeHandler = useCallback((e: ChangeEvent<HTMLInputElement>) => {\r\n        let newIsDoneValue = e.currentTarget.checked\r\n        props.changeTaskStatus(props.task.id, newIsDoneValue ? TaskStatuses.Completed : TaskStatuses.New, props.todolistId)\r\n    }, [props.task.id, props.todolistId]);\r\n\r\n    const onTitleChangeHandler = useCallback((newValue: string) => {\r\n        props.changeTaskTitle(props.task.id, newValue, props.todolistId)\r\n    }, [props.task.id, props.todolistId]);\r\n\r\n    return <div key={props.task.id} className={props.task.status === TaskStatuses.Completed ? 'is-done' : ''}>\r\n        <Checkbox\r\n            checked={props.task.status === TaskStatuses.Completed}\r\n            color=\"primary\"\r\n            onChange={onChangeHandler}\r\n        />\r\n\r\n        <EditableSpan value={props.task.title} onChange={onTitleChangeHandler}/>\r\n        <IconButton onClick={onClickHandler}>\r\n            <Delete/>\r\n        </IconButton>\r\n    </div>\r\n})\r\n",["68","69"],"D:\\My project\\my_trello\\src\\app\\App.tsx",["70","71","72"],"D:\\My project\\my_trello\\src\\features\\TodolistsList\\Todolist\\Todolist.tsx",["73","74","75","76","77","78"],"import React, {useCallback, useEffect} from 'react'\r\nimport {AddItemForm} from '../../../components/AddItemForm/AddItemForm'\r\nimport {EditableSpan} from '../../../components/EditableSpan/EditableSpan'\r\nimport {Button, IconButton} from '@material-ui/core'\r\nimport {Delete} from '@material-ui/icons'\r\nimport {Task} from './Task/Task'\r\nimport {TaskStatuses, TaskType} from '../../../api/todolists-api'\r\nimport {FilterValuesType, TodolistDomainType} from '../todolists-reducer'\r\nimport {useDispatch} from 'react-redux'\r\nimport {fetchTasksTC} from '../tasks-reducer'\r\n\r\ntype PropsType = {\r\n    todolist: TodolistDomainType\r\n    tasks: Array<TaskType>\r\n    changeFilter: (value: FilterValuesType, todolistId: string) => void\r\n    addTask: (title: string, todolistId: string) => void\r\n    changeTaskStatus: (id: string, status: TaskStatuses, todolistId: string) => void\r\n    changeTaskTitle: (taskId: string, newTitle: string, todolistId: string) => void\r\n    removeTask: (taskId: string, todolistId: string) => void\r\n    removeTodolist: (id: string) => void\r\n    changeTodolistTitle: (id: string, newTitle: string) => void\r\n    demo?: boolean\r\n}\r\n\r\nexport const Todolist = React.memo(function ({demo = false, ...props}: PropsType) {\r\n    console.log('Todolist called')\r\n\r\n    const dispatch = useDispatch()\r\n    useEffect(() => {\r\n        if (demo) {\r\n            return\r\n        }\r\n        const thunk = fetchTasksTC(props.todolist.id)\r\n        dispatch(thunk)\r\n    }, [])\r\n\r\n    const addTask = useCallback((title: string) => {\r\n        props.addTask(title, props.todolist.id)\r\n    }, [props.addTask, props.todolist.id])\r\n\r\n    const removeTodolist = () => {\r\n        props.removeTodolist(props.todolist.id)\r\n    }\r\n    const changeTodolistTitle = useCallback((title: string) => {\r\n        props.changeTodolistTitle(props.todolist.id, title)\r\n    }, [props.todolist.id, props.changeTodolistTitle])\r\n\r\n    const onAllClickHandler = useCallback(() => props.changeFilter('all', props.todolist.id), [props.todolist.id, props.changeFilter])\r\n    const onActiveClickHandler = useCallback(() => props.changeFilter('active', props.todolist.id), [props.todolist.id, props.changeFilter])\r\n    const onCompletedClickHandler = useCallback(() => props.changeFilter('completed', props.todolist.id), [props.todolist.id, props.changeFilter])\r\n\r\n\r\n    let tasksForTodolist = props.tasks\r\n\r\n    if (props.todolist.filter === 'active') {\r\n        tasksForTodolist = props.tasks.filter(t => t.status === TaskStatuses.New)\r\n    }\r\n    if (props.todolist.filter === 'completed') {\r\n        tasksForTodolist = props.tasks.filter(t => t.status === TaskStatuses.Completed)\r\n    }\r\n\r\n    return <div>\r\n        <h3><EditableSpan value={props.todolist.title} onChange={changeTodolistTitle}/>\r\n            <IconButton onClick={removeTodolist} disabled={props.todolist.entityStatus === 'loading'}>\r\n                <Delete/>\r\n            </IconButton>\r\n        </h3>\r\n        <AddItemForm addItem={addTask} disabled={props.todolist.entityStatus === 'loading'}/>\r\n        <div>\r\n            {\r\n                tasksForTodolist.map(t => <Task key={t.id} task={t} todolistId={props.todolist.id}\r\n                                                removeTask={props.removeTask}\r\n                                                changeTaskTitle={props.changeTaskTitle}\r\n                                                changeTaskStatus={props.changeTaskStatus}\r\n                />)\r\n            }\r\n        </div>\r\n        <div style={{paddingTop: '10px'}}>\r\n            <Button variant={props.todolist.filter === 'all' ? 'outlined' : 'text'}\r\n                    onClick={onAllClickHandler}\r\n                    color={'default'}\r\n            >All\r\n            </Button>\r\n            <Button variant={props.todolist.filter === 'active' ? 'outlined' : 'text'}\r\n                    onClick={onActiveClickHandler}\r\n                    color={'primary'}>Active\r\n            </Button>\r\n            <Button variant={props.todolist.filter === 'completed' ? 'outlined' : 'text'}\r\n                    onClick={onCompletedClickHandler}\r\n                    color={'secondary'}>Completed\r\n            </Button>\r\n        </div>\r\n    </div>\r\n})\r\n\r\n\r\n","D:\\My project\\my_trello\\src\\features\\Login\\Login.tsx",["79"],"D:\\My project\\my_trello\\src\\app\\store.ts",[],"D:\\My project\\my_trello\\src\\features\\Login\\auth-reducer.ts",["80","81"],"D:\\My project\\my_trello\\src\\components\\EditableSpan\\EditableSpan.tsx",[],"D:\\My project\\my_trello\\src\\features\\TodolistsList\\TodolistsList.tsx",["82","83","84","85","86","87","88","89"],"D:\\My project\\my_trello\\src\\components\\AddItemForm\\AddItemForm.tsx",["90","91","92"],{"ruleId":"93","severity":1,"message":"94","line":13,"column":45,"nodeType":"95","messageId":"96","endLine":13,"endColumn":47},{"ruleId":"97","replacedBy":"98"},{"ruleId":"99","replacedBy":"100"},{"ruleId":"101","severity":1,"message":"102","line":15,"column":97,"nodeType":"103","endLine":15,"endColumn":130,"suggestions":"104"},{"ruleId":"101","severity":1,"message":"102","line":20,"column":8,"nodeType":"103","endLine":20,"endColumn":41,"suggestions":"105"},{"ruleId":"101","severity":1,"message":"102","line":24,"column":8,"nodeType":"103","endLine":24,"endColumn":41,"suggestions":"106"},{"ruleId":"97","replacedBy":"107"},{"ruleId":"99","replacedBy":"108"},{"ruleId":"109","severity":1,"message":"110","line":13,"column":15,"nodeType":"111","messageId":"112","endLine":13,"endColumn":21},{"ruleId":"101","severity":1,"message":"113","line":34,"column":8,"nodeType":"103","endLine":34,"endColumn":10,"suggestions":"114"},{"ruleId":"101","severity":1,"message":"115","line":40,"column":9,"nodeType":"103","endLine":40,"endColumn":11,"suggestions":"116"},{"ruleId":"101","severity":1,"message":"117","line":35,"column":8,"nodeType":"103","endLine":35,"endColumn":10,"suggestions":"118"},{"ruleId":"101","severity":1,"message":"102","line":39,"column":8,"nodeType":"103","endLine":39,"endColumn":42,"suggestions":"119"},{"ruleId":"101","severity":1,"message":"102","line":46,"column":8,"nodeType":"103","endLine":46,"endColumn":54,"suggestions":"120"},{"ruleId":"101","severity":1,"message":"102","line":48,"column":95,"nodeType":"103","endLine":48,"endColumn":134,"suggestions":"121"},{"ruleId":"101","severity":1,"message":"102","line":49,"column":101,"nodeType":"103","endLine":49,"endColumn":140,"suggestions":"122"},{"ruleId":"101","severity":1,"message":"102","line":50,"column":107,"nodeType":"103","endLine":50,"endColumn":146,"suggestions":"123"},{"ruleId":"124","severity":1,"message":"125","line":59,"column":32,"nodeType":"126","endLine":59,"endColumn":49},{"ruleId":"109","severity":1,"message":"127","line":3,"column":35,"nodeType":"111","messageId":"112","endLine":3,"endColumn":43},{"ruleId":"109","severity":1,"message":"128","line":66,"column":6,"nodeType":"111","messageId":"112","endLine":66,"endColumn":19},{"ruleId":"101","severity":1,"message":"129","line":37,"column":8,"nodeType":"103","endLine":37,"endColumn":10,"suggestions":"130"},{"ruleId":"101","severity":1,"message":"115","line":42,"column":8,"nodeType":"103","endLine":42,"endColumn":10,"suggestions":"131"},{"ruleId":"101","severity":1,"message":"115","line":47,"column":8,"nodeType":"103","endLine":47,"endColumn":10,"suggestions":"132"},{"ruleId":"101","severity":1,"message":"115","line":52,"column":8,"nodeType":"103","endLine":52,"endColumn":10,"suggestions":"133"},{"ruleId":"101","severity":1,"message":"115","line":57,"column":8,"nodeType":"103","endLine":57,"endColumn":10,"suggestions":"134"},{"ruleId":"101","severity":1,"message":"115","line":62,"column":8,"nodeType":"103","endLine":62,"endColumn":10,"suggestions":"135"},{"ruleId":"101","severity":1,"message":"115","line":67,"column":8,"nodeType":"103","endLine":67,"endColumn":10,"suggestions":"136"},{"ruleId":"101","severity":1,"message":"115","line":72,"column":8,"nodeType":"103","endLine":72,"endColumn":10,"suggestions":"137"},{"ruleId":"109","severity":1,"message":"138","line":2,"column":9,"nodeType":"111","messageId":"112","endLine":2,"endColumn":12},{"ruleId":"109","severity":1,"message":"139","line":2,"column":14,"nodeType":"111","messageId":"112","endLine":2,"endColumn":20},{"ruleId":"109","severity":1,"message":"140","line":2,"column":22,"nodeType":"111","messageId":"112","endLine":2,"endColumn":33},"eqeqeq","Expected '!==' and instead saw '!='.","BinaryExpression","unexpected","no-native-reassign",["141"],"no-negated-in-lhs",["142"],"react-hooks/exhaustive-deps","React Hook useCallback has a missing dependency: 'props'. Either include it or remove the dependency array. However, 'props' will change when *any* prop changes, so the preferred fix is to destructure the 'props' object outside of the useCallback call and refer to those specific props inside useCallback.","ArrayExpression",["143"],["144"],["145"],["141"],["142"],"@typescript-eslint/no-unused-vars","'Router' is defined but never used.","Identifier","unusedVar","React Hook useEffect has a missing dependency: 'dispatch'. Either include it or remove the dependency array.",["146"],"React Hook useCallback has a missing dependency: 'dispatch'. Either include it or remove the dependency array.",["147"],"React Hook useEffect has missing dependencies: 'demo', 'dispatch', and 'props.todolist.id'. Either include them or remove the dependency array.",["148"],["149"],["150"],["151"],["152"],["153"],"react/jsx-no-target-blank","Using target=\"_blank\" without rel=\"noreferrer\" is a security risk: see https://html.spec.whatwg.org/multipage/links.html#link-type-noopener","JSXAttribute","'TaskType' is defined but never used.","'ThunkDispatch' is defined but never used.","React Hook useEffect has missing dependencies: 'demo', 'dispatch', and 'isLoggedIn'. Either include them or remove the dependency array.",["154"],["155"],["156"],["157"],["158"],["159"],["160"],["161"],"'Box' is defined but never used.","'Button' is defined but never used.","'FormControl' is defined but never used.","no-global-assign","no-unsafe-negation",{"desc":"162","fix":"163"},{"desc":"162","fix":"164"},{"desc":"162","fix":"165"},{"desc":"166","fix":"167"},{"desc":"166","fix":"168"},{"desc":"169","fix":"170"},{"desc":"162","fix":"171"},{"desc":"162","fix":"172"},{"desc":"162","fix":"173"},{"desc":"162","fix":"174"},{"desc":"162","fix":"175"},{"desc":"176","fix":"177"},{"desc":"166","fix":"178"},{"desc":"166","fix":"179"},{"desc":"166","fix":"180"},{"desc":"166","fix":"181"},{"desc":"166","fix":"182"},{"desc":"166","fix":"183"},{"desc":"166","fix":"184"},"Update the dependencies array to be: [props]",{"range":"185","text":"186"},{"range":"187","text":"186"},{"range":"188","text":"186"},"Update the dependencies array to be: [dispatch]",{"range":"189","text":"190"},{"range":"191","text":"190"},"Update the dependencies array to be: [demo, dispatch, props.todolist.id]",{"range":"192","text":"193"},{"range":"194","text":"186"},{"range":"195","text":"186"},{"range":"196","text":"186"},{"range":"197","text":"186"},{"range":"198","text":"186"},"Update the dependencies array to be: [demo, dispatch, isLoggedIn]",{"range":"199","text":"200"},{"range":"201","text":"190"},{"range":"202","text":"190"},{"range":"203","text":"190"},{"range":"204","text":"190"},{"range":"205","text":"190"},{"range":"206","text":"190"},{"range":"207","text":"190"},[765,798],"[props]",[1071,1104],[1261,1294],[1252,1254],"[dispatch]",[1369,1371],[1464,1466],"[demo, dispatch, props.todolist.id]",[1581,1615],[1846,1892],[1991,2030],[2133,2172],[2281,2320],[1328,1330],"[demo, dispatch, isLoggedIn]",[1499,1501],[1670,1672],[1875,1877],[2088,2090],[2289,2291],[2436,2438],[2615,2617]]